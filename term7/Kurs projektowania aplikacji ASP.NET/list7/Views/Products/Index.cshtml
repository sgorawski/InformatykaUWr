@using PagedList.Mvc
@model PagedList.IPagedList<ASPNET_Z7.Models.Product>
@{ 
    var grid = new WebGrid(Model);
}

<div>
    @if (User.Identity.IsAuthenticated)
    {
        <p>Hello, @User.Identity.Name @Html.ActionLink("Log out", "Logout", controllerName: "Auth")</p>
    }
    else
    {
        <p>@Html.ActionLink("Log in", "Login", controllerName: "Auth")</p>
    }
</div>
<div>
    @using (Html.BeginForm("Index", "Products", FormMethod.Get))
    {
        <div class="input-group mb-3">
            <span>@Html.TextBox("search", ViewBag.searchClause as string, htmlAttributes: new { @class = "form-control" })</span>
            <div class="input-group-append">
                <input type="Submit" value="Search" class="btn btn-primary" />
            </div>
        </div>
    }
</div>
<div>
    @grid.GetHtml(
        columns: grid.Columns(
            grid.Column("ImageURL", "Image", canSort: false, format: @<img src="@item.ImageURL" alt="@item.Name" class="img-thumbnail" />),
            grid.Column("Name"),
            grid.Column("Description", canSort: false),
            grid.Column("Price"),
            grid.Column(format: item => Html.ActionLink("Add to cart", "Add", controllerName: "ShoppingCart", routeValues: new { productID = item.ID }, htmlAttributes: null)),
            grid.Column(format: item =>
            {
                string html;
                if (User.Identity.IsAuthenticated)
                {
                    html = Html.ActionLink("Edit", "Edit", new { id = item.ID }) + " | " + Html.ActionLink("Delete", "Delete", new { id = item.ID });
                }
                else
                {
                    html = "";
                }
                return Html.Raw(html);
            })),
        htmlAttributes: new { @class = "table" })
</div>
<div>
    @if (User.Identity.IsAuthenticated)
    {
        @Html.ActionLink("Add new product", "Add", new { }, htmlAttributes: new { @class = "btn btn-primary" })
    }
</div>
<div>
    @Html.PagedListPager(Model, page => Url.Action(
        "Index",
        new
        {
            page,
            sort = ViewBag.sort, 
            sortdir = ViewBag.sortOrder,
            search = ViewBag.searchClause,
        }))
</div>
